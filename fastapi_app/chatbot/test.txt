1
1. Актуальность задачи
Tada.team – платформа для организации командной работы. В состав
продукта помимо функций мессенджера и звонков входят также инструменты
управления задачами и планирования встреч. На текущий момент Tada.team
используют более 20 тыс. корпоративных пользователей.
Несмотря на наличие широких возможностей для взаимодействия
внутри компании, которое предоставляет наш облачный продукт, для решения
конкретных бизнес задач часто требуется поиск и анализ информации и
ответов вовне. Это приводит к тому, что сегодня пользователи tada.team
вынуждены прерывать совещание или асинхронное обсуждение, ставить
задачи на поиск и обработку информации, а также назначать повторные
встречи. Каждый день бизнес сталкивается с неоправданными
транзакционными издержками. И эта проблема только усугубляется в связи с
трендом перехода на удаленную работу и невозможностью спросить совета у
рядом сидящих коллег.
Наша цель – сделать командную работу по-настоящему эффективной.
Именно поэтому мы смотрим в сторону активно развивающейся в
потребительском сегменте индустрии умных ассистентов и технологий,
поддерживающих принятия эффективных решений, и думаем о том, как
применить эти технологии в бизнес-сегменте.
2. Постановка задачи
Разработайте прототип самодостаточного сервиса с использованием
любых доступных на рынке технологий и инструментов (Open Source или
проприетарных), который можно подключить к корпоративному мессенджеру
по API и который позволит «на лету» с помощью текстовых запросов находить в
открытых источниках информацию и готовить актуальные ответы на вопросы из
определенной сферы бизнеса (законодательства, бухгалтерского учета и т.д.)
или информацию по конкретному рынку (ИТ, ритейл и пр.).
1
Будет плюсом, если сервис сможет фильтровать «потребительский»
контент и показывать только релевантные для бизнес-среды ответы. Вариант
реализации механизма фильтрации – через встроенные автоматизированные
механизмы или ввод ограничивающих параметров внутри сервиса – не
принципиален.
Интерфейс взаимодействия с сервисом должен быть реализован через
понятное API, отдельный frontend не нужен.
3. Бизнес требования
Пользователи, имеющие авторизованный доступ к сервису, должны
иметь возможность решать следующие бизнес-задачи:
1. Фильтровать не имеющие отношение к бизнес-тематике вопросы;
2. Отправлять бизнес-запросы и уточнения к ним, сформированные в
свободной текстовой форме;
3. Получать ответы на свой бизнес-запрос в текстовой форме;
4. Иметь возможность оценить качество полученного ответа.
Возможные тематики запросов:
1. Запросы по получению информации по действующему Российскому
законодательству;
2. Запросы по получению информации по принятым в России нормам и
принципам бухгалтерского и управленческого учета;
3. Запросы на получение информации по доступным в России льготам для
определенных категорий бизнеса;
4. Запросы на получение информации по рыночной аналитике
определенной отрасли (ИТ, ритейл, финансы и пр.);
5. Запросы на получение информации по лучшему опыту организации
определенных типов процессов (методики управления проектами,
развитие сотрудников, организация продаж и пр.);
2
Вы можете выбрать любую тематику запросов для своего решения или
любой набор тематик. Тематики даны справочно, не обязательно использовать
именно их. Выбор тематик может быть обусловлен
особенностями/ограничениями выбранной вами технологии или вашей
оценкой значимости запросов для целевой аудитории.
4. Пользовательский сценарий
1. Пользователь взаимодействует со своей командой в корпоративном
мессенджере (tada.team), в процессе взаимодействия формируется
бизнес-запрос;
2. Пользователь с помощью команды для бота в мессенджере отправляет
бизнес-запрос на обработку в сервис;
3. Бот сообщает пользователю, что запрос принят и обрабатывается
(передает запрос на сервис с указанием id пользователя, отправившего
запрос, и id организации, к которой относится пользователь);
4. Когда запрос обработан, бот сообщает пользователю полученный ответ:
a. В случае, если ответ получить на запрос невозможно (запрос не
имеет смысла, запрещен параметрами используемых технологий,
недействительна авторизация бота в сервисе, превышен лимит
доступных запросов и т.д.) – пользователь получает сообщение об
этом;
5. Если ответ не устраивает пользователя, у него есть возможность уточнить
свой запрос (и дальше см. п.3; поддерживать контекстуальное
дополнение запросов не требуется);
6. Когда пользователь закончил взаимодействие с запросом, бот предлагает
пользователю оценить качество ответа по шкале от 1 до 5 (далее бот
передает их сервису).
5. Целевая аудитория
Представители малого и среднего бизнеса России различных отраслей.
Сотрудники и линейные руководители, в основном – работающие в офисе.
3
6. Функциональные требования
Сервис должен обеспечивать функциональные возможности, описанные
ниже.
В части организации доступа к сервису:
1. Проверка авторизации внешних потребителей при запросах к API:
a. Достаточно базово принимать из header в запросе API-ключ;
b. API ключ должен быть связан с компанией (не ее сотрудниками);
c. Ролевой модели или поддержки разграничения прав не требуется;
d. Проверка должна происходить при каждом факте доступа к
сервису.
2. Фиксация попыток и фактов доступа к функционалу сервиса:
a. Фиксация фактов доступа в привязке к id пользователя (внешний
id);
b. Фиксация фактов доступа в привязке id компании (внутренний id
сервиса).
3. Возврат ответов на запросы:
a. API ключ недействительный (у компании нет доступа к сервису);
b. API ключ действительный, запрос не удалось принять;
c. Запрос не удалось обработать в срок, timeout;
d. API ключ действительный, запрос успешно принят.
В части проверки запроса:
1. Прием и фиксация текстовых запросов:
a. Фиксация запросов в привязке к id компании;
b. Фиксация запросов в привязке к id пользователя;
c. Должен быть зафиксирован timestamp отправки запроса.
2. Прием и фиксация правил фильтрации:
a. Достаточно организовать фильтрацию через минус-слова;
b. Фиксация правил фильтрации в привязке к id компании;
c. Должен быть зафиксирован timestamp создания правила
фильтрации.
4
3. Прием запросов на архивацию правил фильтрации:
a. Правила фильтрации не должны удаляться, для отмены правила
необходимо использовать флаг архивации;
b. Должен быть зафиксирован timestamp архивации правила
фильтрации.
4. Проверка запроса и фиксация результатов проверки по правилам
фильтрации:
a. Валидация запроса от пользователя компании, исходя из правил
фильтрации компании;
b. Фиксация правил проверки запроса в привязке к id запроса;
c. В случае непрохождения фильтрации также с привязкой к
запрещающему правилу.
5. Возврат ответов по результату проверки и обработки запроса:
a. Запрос прошел проверку, отправлен на обработку;
b. Проверку не удалось обработать в срок, timeout;
c. Запрос не прошел проверку, возврат текста запрещающего
правила.
В части обработки запроса:
1. Организация семантического разбора запроса:
a. Может осуществляться с помощью готовых рыночных технологий.
2. Организация поиска необходимой для генерации ответа информации:
a. Может осуществляться с помощью готовых рыночных технологий
(для обученных нейросетей не требуется дополнительного поиска
информации);
b. Может быть реализована через интеграцию с конкретными
открытыми источниками данных.
3. Формирование и фиксация бизнес-ответа на запрос
a. На выходе должен выдаваться текст с ответом на основе найденной
информации;
b. Может осуществляться с помощью готовых рыночных технологий;
5
c. Если реализуется через интеграцию с конкретными открытыми
источниками данных – необходимо предоставление ссылки на
источник;
d. Фиксация ответа в привязке к id запроса.
4. Возврат ответов по результату обработки запроса:
a. Ответ подготовлен, возврат текста ответа;
b. Ответ не удалось подготовить в срок, timeout;
c. Ответ не удалось сформировать, ошибка.
Мы не ограничиваем вас в использовании конкретных технологий и даже
продуктов, существующих на рынке, для реализации функционала обработки
запроса, но прежде чем приступать к разработке, ознакомьтесь с
нефункциональными требованиями.
В части получения обратной связи:
1. Прием и фиксация оценки по результатам запроса:
a. Хранение числового значения оценки по запросу;
b. Фиксация оценки в привязке к id запроса;
c. Фиксация оценки в привязке к id пользователя.
2. Возврат ответов по результату приема оценки:
a. Оценка принята;
b. Оценку не удалось принять в срок, timeout;
c. Оценку не удалось принять, ошибка.
В части поддержки очередей и масштабирования при нагрузках:
Специальных требований не предъявляется, наша задача –
протестировать прототип сервиса, поэтому лучше сосредоточиться на подборе
технологии и отработке пользовательского сценария, а не на проработке
отказоустойчивой архитектуры.
6
7. Нефункциональные требования
Сервис должен соответствовать нефункциональным требованиям, описанным
ниже.
Интеллектуальная собственность:
1. Допускается использование Open Source технологий любого рода на
любом стэке;
2. Допускается использование проприетарных технологий при следующих
условиях:
a. Использование технологии для прототипа (не в промышленной
версии) не накладывает дополнительных юридических
обязательств;
b. Возможно использование технологии в промышленной версии
продукта, в том числе на коммерческих условиях (регион доступа
не имеет значения);
c. Команда может продемонстрировать работоспособность
прототипа с использованием выбранной технологии без
нарушения законодательства РФ.
Поддержка русского языка
1. Сервис должен иметь возможность принимать запросы и выдавать
ответы на русском языке:
a. Допускается возможность применения сервисов
автоматизированного перевода для организации
работоспособности с русским языком технологий, которые
изначально его не поддерживают.
7
8. Требования к UX/UI
1. Сервису не требуется графический интерфейс;
2. Все взаимодействие с сервисом должно быть реализовано через API
методы;
3. Должна поддерживаться модель проверки доступа (авторизации) к
предоставляемым методам;
4. Методы должны отдавать четкий однозначный и понятный ответ на
запросы;
5. Должны быть отработаны негативные корнеркейсы, сервис должен уметь
идентифицировать и отображать в ответах типы ошибки.
9. Требования к презентации решения
1. Презентация предоставляется в формате .pdf;
2. В презентации должен быть раскрыт принцип работы сервиса;
3. Презентация должна раскрывать используемые технологии, open source
и проприетарные решения;
4. В презентации должно быть приведено обоснование, почему выбранные
технологии и принцип работы сервиса позволяют эффективно решать
поставленные бизнес-задачи.
10. Критерии, учитываемые при проведении предварительной экспертизы
1. Подход команды к решению задачи:
a. полнота реализации бизнес-процесса пользователя.
2. Техническая проработка решения:
a. работоспособность решения;
b. поддерживаемость решения.
3. Соответствие решения выбранной командой задаче:
a. количество и охват отрабатываемых сервисом тематик
бизнес-запросов.
8
4. Эффективность решения в рамках поставленной задачи:
a. скорость работы сервиса.
11. Критерии, учитываемые при проведении финальной экспертизы
1. Подход команды к решению задачи:
a. полнота реализации бизнес-процесса пользователя.
2. Техническая проработка решения:
a. работоспособность решения;
b. поддерживаемость решения;
c. качество кода;
d. отчуждаемость сервиса и возможность интеграции с tada.team
(сервис должен иметь возможность работать самостоятельно без
зависимости от конкретной инфраструктуры).
3. Соответствие решения выбранной командой задаче:
a. количество и охват отрабатываемых сервисов тематик
бизнес-запросов;
b. полнота описания доступных методов API.
4. Эффективность решения в рамках поставленной задачи:
a. скорость работы сервиса.
5. Выступление коллектива на питч-сессии:
a. убедительность и информативность;
b. лаконичные и аргументированные ответы;
c. соответствие регламенту выступления.
12. Требования к сдаче решений на платформе
1. Ссылка на репозиторий с кодом;
2. Ссылка на презентацию (требования указаны в шаблоне);
3. Ссылка (адрес) на прототип для проверки выполненной работы с
помощью отправки запросов методами API;
4. Ссылка на описание доступных методов API;
9
5. Ссылка на дополнительную сопроводительную документацию в случае
наличия (.doc/.pdf).
10